#!/usr/bin/env python3
"""
Simulaci√≥n Robots vs Monstruos
Archivo principal de ejecuci√≥n de la simulaci√≥n.

Este archivo contiene √∫nicamente la l√≥gica de ejecuci√≥n de la simulaci√≥n,
importando las clases necesarias desde sus respectivos m√≥dulos.
"""

import random
import time
from entorno import Entorno, crear_posicion_aleatoria_libre
from monstruo import Monstruo
from robot import Robot


def simulacion_principal():
    """
    Funci√≥n principal que ejecuta la simulaci√≥n completa.
    """
    print("=== SIMULACI√ìN ROBOTS VS MONSTRUOS ===")
    print("Iniciando simulaci√≥n...")
    
    # Par√°metros de la simulaci√≥n
    N = 8  # Tama√±o del cubo (8x8x8)
    p_free = 0.7  # 70% de celdas libres
    p_soft = 0.2  # 20% de celdas vac√≠as (obst√°culos)
    num_robots = 3
    num_monstruos = 5
    max_iteraciones = 50
    
    # Crear el entorno
    entorno = Entorno(N, p_free, p_soft)
    print(f"Entorno creado: {N}x{N}x{N} con {p_free*100}% libres y {p_soft*100}% vac√≠as")
    
    # Crear robots
    print(f"\nCreando {num_robots} robots...")
    for i in range(num_robots):
        posicion = crear_posicion_aleatoria_libre(entorno)
        if posicion:
            orientacion = random.choice([(1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, -1, 0), (0, 0, 1), (0, 0, -1)])
            robot = Robot(posicion, orientacion)
            entorno.agregar_entidad(robot, posicion)
            print(f"Robot {i+1} creado en posici√≥n {posicion} - {robot.obtener_orientacion_texto()}")
    
    # Crear monstruos
    print(f"\nCreando {num_monstruos} monstruos...")
    for i in range(num_monstruos):
        posicion = crear_posicion_aleatoria_libre(entorno)
        if posicion:
            monstruo = Monstruo(posicion)
            entorno.agregar_entidad(monstruo, posicion)
            print(f"Monstruo {i+1} creado en posici√≥n {posicion}")
    
    # Mostrar estado inicial
    entorno.visualizar_compacto()
    
    # Bucle principal de simulaci√≥n
    print(f"\nIniciando simulaci√≥n por {max_iteraciones} iteraciones...")
    print("Presiona Ctrl+C para detener la simulaci√≥n")
    
    try:
        for t in range(max_iteraciones):
            print(f"\n--- ITERACI√ìN {t+1} ---")
            
            # Actuar con todos los robots
            robots_activos = entorno.robots.copy()  # Copia para evitar problemas de modificaci√≥n durante iteraci√≥n
            for robot in robots_activos:
                if robot in entorno.robots:  # Verificar que a√∫n existe
                    robot.decidir_y_actuar(entorno, t)
            
            # Actuar con todos los monstruos
            monstruos_activos = entorno.monstruos.copy()
            for monstruo in monstruos_activos:
                if monstruo in entorno.monstruos:  # Verificar que a√∫n existe
                    monstruo.actuar(entorno, t)
            
            # Mostrar estado del mundo
            entorno.visualizar_compacto()
            
            # Verificar condiciones de fin de juego
            if len(entorno.monstruos) == 0:
                print("\nüéâ ¬°VICTORIA! Todos los monstruos han sido eliminados!")
                break
            elif len(entorno.robots) == 0:
                print("\nüíÄ DERROTA: Todos los robots han sido destruidos!")
                break
            
            # Pausa para visualizaci√≥n
            time.sleep(1)
    
    except KeyboardInterrupt:
        print("\n\nSimulaci√≥n interrumpida por el usuario.")
    
    # Resultado final
    print(f"\n=== RESULTADO FINAL ===")
    print(f"Robots restantes: {len(entorno.robots)}")
    print(f"Monstruos restantes: {len(entorno.monstruos)}")
    
    if len(entorno.monstruos) == 0:
        print("üèÜ Los robots han ganado la batalla!")
    elif len(entorno.robots) == 0:
        print("üëπ Los monstruos han ganado la batalla!")
    else:
        print("‚è∞ La simulaci√≥n termin√≥ por tiempo l√≠mite.")


if __name__ == "__main__":
    # Ejecutar la simulaci√≥n
    simulacion_principal()